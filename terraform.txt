Terraform installation 

# Install `yum-utils` package which provides several utilities and plugins for the `yum` package manager.
sudo yum install -y yum-utils

# Add the HashiCorp repository to the list of repositories managed by `yum-config-manager`.
# This repository contains the Terraform package.
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo

# Install Terraform package using `yum`.
sudo yum -y install terraform

# Verify the installation of Terraform by running the following command:
terraform --version

# Open a terminal or command prompt.

# Type the following command to start the AWS CLI configuration process.
aws configure

# The command will prompt you to enter your AWS access key ID, secret access key, default region name, and default output format. 
# Replace <your access key ID>, <your secret access key>, and <your preferred region> with your actual values.
AWS Access Key ID [None]: <your access key ID>
AWS Secret Access Key [None]: <your secret access key>
Default region name [None]: <your preferred region>
Default output format [None]: json

aws ec2 describe-instances --query 'Reservations[].Instances[].{Name: Tags[?Key=='Name'].Value | [0], InstanceId: InstanceId, State: State.Name, Type: InstanceType, PrivateIP: PrivateIpAdddress}' --output table

Create VPC

mkdir project-tf

cd project-tf/

vi main.tf

provider "aws" {
  region = "ap-south-1"
}

resource "aws_vpc" "md_vpc" {
 cidr_block = "10.0.0.0/16"
 tags = {
   Name = "md"
}
}

terraform init

terraform plan

terraform apply

terraform destroy

mkdir projecttf-01

cd projecttf-01

vi main.tf

provider "aws" {
  region = "ap-south-1"  # Replace with your desired AWS region
}

resource "aws_vpc" "my_vpc" {
  cidr_block       = "10.0.0.0/16"
  enable_dns_hostnames = true
  tags = {
    Name = "md-devops-trf-vpc"
  }
}

resource "aws_subnet" "public_subnet" {
  vpc_id            = aws_vpc.my_vpc.id
  cidr_block        = "10.0.0.0/24"
  map_public_ip_on_launch = true
  tags = {
    Name = "public-subnet"
  }
}

resource "aws_security_group" "nginx_sg" {
  name        = "nginx-sg"
  description = "Security group for Nginx"
  vpc_id      = aws_vpc.my_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "my_ec2" {
  ami           = "ami-006935d9a6773e4ec"  # Replace with your desired AMI ID
  instance_type = "t2.micro"  # Use default instance type

  subnet_id                  = aws_subnet.public_subnet.id
  key_name                   = "devopsjune"  # Replace with the name of your key pair
  vpc_security_group_ids     = [aws_security_group.nginx_sg.id]
  associate_public_ip_address = true

  tags = {
    Name = "my-ec2-instance"
  }
}

resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }

  tags = {
    Name = "public-route-table"
  }
}

resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "my-internet-gateway"
  }
}

resource "aws_route_table_association" "public_subnet_association" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_route_table.id
}

